<?php
session_start();

// Set CORS headers to handle preflight requests
header('Access-Control-Allow-Origin: https://se-dev.cse.buffalo.edu/CSE442/2024-Fall/asaha5/');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');
header('Access-Control-Allow-Credentials: true');

// Handle OPTIONS requests for CORS preflight
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    header('HTTP/1.1 204 No Content');
    exit;
}

// Spotify API credentials
$accessToken = $_SESSION['access_token'] ?? null;
$spotifyApiUrl = 'https://api.spotify.com/v1/';

// Function to make Spotify API requests
function makeSpotifyApiRequest($url, $method = 'GET', $data = null, $accessToken) {
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        "Authorization: Bearer $accessToken",
        'Content-Type: application/json'
    ]);

    if ($method === 'POST' && $data) {
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    }

    $response = curl_exec($ch);

    // Handle cURL errors
    if ($response === false) {
        $errorMsg = curl_error($ch);
        curl_close($ch);
        return ['error' => "cURL Error: $errorMsg"];
    }

    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    // Log request and response for debugging
    file_put_contents('debug.log', "Request URL: $url\nMethod: $method\nData: " . json_encode($data) . "\nHTTP Code: $httpCode\nResponse: $response\n", FILE_APPEND);

    // Check for 403 Forbidden error
    if ($httpCode === 403) {
        file_put_contents('debug.log', "403 Forbidden Response: $response\n", FILE_APPEND);
        return ['error' => "HTTP Code 403 - Forbidden", 'response' => $response];
    }

    // Check if the response is not successful
    if ($httpCode !== 201 && $httpCode !== 200) {
        return ['error' => "HTTP Code $httpCode", 'response' => $response];
    }

    // Decode JSON response
    $decodedResponse = json_decode($response, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        return ['error' => 'Failed to decode JSON response', 'response' => $response];
    }

    return $decodedResponse;
}

// Step 1: Verify the access token and retrieve user ID using /me endpoint
$meUrl = $spotifyApiUrl . "me";
$meResponse = makeSpotifyApiRequest($meUrl, 'GET', null, $accessToken);

if (isset($meResponse['id'])) {
    $userId = $meResponse['id'];
    file_put_contents('debug.log', "User ID from /me: $userId\n", FILE_APPEND);
} else {
    file_put_contents('debug.log', "Failed to retrieve user info from /me endpoint: " . json_encode($meResponse) . "\n", FILE_APPEND);
    echo json_encode(['success' => false, 'message' => 'Failed to retrieve user info']);
    exit;
}

// Step 2: Handle POST request to create and add tracks to the playlist
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $inputData = json_decode(file_get_contents('php://input'), true);
    $trackUris = $inputData['trackUris'] ?? [];
    $playlistName = $inputData['playlistName'] ?? '';

    // Validate input data
    if (empty($trackUris) || empty($playlistName)) {
        echo json_encode(['success' => false, 'message' => 'Track URIs or playlist name cannot be empty']);
        exit;
    }

    // Step 3: Create a new playlist
    $createPlaylistUrl = $spotifyApiUrl . "users/$userId/playlists";
    $createPlaylistData = [
        'name' => $playlistName,
        'description' => 'Generated by TBD',
        'public' => false
    ];

    // Debugging: Log the request URL and payload
    file_put_contents('debug.log', "Creating Playlist URL: $createPlaylistUrl\nPayload: " . json_encode($createPlaylistData) . "\n", FILE_APPEND);

    $createPlaylistResponse = makeSpotifyApiRequest($createPlaylistUrl, 'POST', $createPlaylistData, $accessToken);

    // Check if playlist creation failed and log the response
    if (isset($createPlaylistResponse['error'])) {
        file_put_contents('debug.log', "Error Response: " . json_encode($createPlaylistResponse['error']) . "\n", FILE_APPEND);
        echo json_encode([
            'success' => false, 
            'message' => 'Failed to create the playlist on Spotify', 
            'error' => $createPlaylistResponse['error']
        ]);
        exit;
    }

    // Check if no playlist ID is returned
    if (!isset($createPlaylistResponse['id'])) {
        file_put_contents('debug.log', "Unexpected Response: " . json_encode($createPlaylistResponse) . "\n", FILE_APPEND);
        echo json_encode(['success' => false, 'message' => 'Unexpected response from Spotify: ' . json_encode($createPlaylistResponse)]);
        exit;
    }

    // Step 4: Add tracks to the newly created playlist
    $playlistId = $createPlaylistResponse['id'];
    $addTracksUrl = $spotifyApiUrl . "playlists/$playlistId/tracks";
    $addTracksData = ['uris' => $trackUris];

    // Debugging: Log add tracks request
    file_put_contents('debug.log', "Add Tracks URL: $addTracksUrl\nPayload: " . json_encode($addTracksData) . "\n", FILE_APPEND);

    $addTracksResponse = makeSpotifyApiRequest($addTracksUrl, 'POST', $addTracksData, $accessToken);

    // Check if adding tracks failed
    if (isset($addTracksResponse['error'])) {
        file_put_contents('debug.log', "Error Adding Tracks: " . json_encode($addTracksResponse['error']) . "\n", FILE_APPEND);
        echo json_encode([
            'success' => false, 
            'message' => 'Failed to add tracks to the playlist', 
            'error' => $addTracksResponse['error']
        ]);
        exit;
    }

    if (isset($addTracksResponse['snapshot_id'])) {
        echo json_encode(['success' => true, 'playlistId' => $playlistId]);
    } else {
        file_put_contents('debug.log', "Unexpected Add Tracks Response: " . json_encode($addTracksResponse) . "\n", FILE_APPEND);
        echo json_encode(['success' => false, 'message' => 'Unexpected response when adding tracks: ' . json_encode($addTracksResponse)]);
    }
}
?>